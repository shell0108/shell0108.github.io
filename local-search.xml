<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据可视化大屏开发小结</title>
    <link href="/2021/05/20/%E5%A4%A7%E5%B1%8F%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
    <url>/2021/05/20/%E5%A4%A7%E5%B1%8F%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>近期接了个前端兼职,做可视化大屏展示的网页，去年暑假这会也是在做成飞的大屏项目，调样式调了好久，正打算和他们那边对接口呢，不过最后不了了之了。<br>先上项目完成截图，再细说技术难点和解决方案</p><ol><li>项目截图</li></ol><ul><li>登录界面：<br><img src="https://ftp.bmp.ovh/imgs/2021/05/8bdfe57739e0fde6.png" alt=""></li><li>主页：<br><img src="https://ftp.bmp.ovh/imgs/2021/05/bb75acedce03af4c.png" alt=""></li><li>各个省市界面：<br><img src="https://ftp.bmp.ovh/imgs/2021/05/53079f62c768f51f.png" alt=""></li><li>对设备进行操作<br><img src="https://ftp.bmp.ovh/imgs/2021/05/4cd4995d1162d046.png" alt=""></li></ul><ol start="2"><li>技术难点</li></ol><ul><li>地图下钻，数据联动</li><li>表格滚动，以及表格的点击事件</li><li>设备数据实时更新到页面</li><li>多设备页面适配</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>暑期前端实习小结-————2020.7~8</title>
    <link href="/2020/08/14/%E6%9A%91%E6%9C%9F%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%93-%E2%80%94%E2%80%94%E2%80%94%E2%80%942020-7-8/"/>
    <url>/2020/08/14/%E6%9A%91%E6%9C%9F%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%93-%E2%80%94%E2%80%94%E2%80%94%E2%80%942020-7-8/</url>
    
    <content type="html"><![CDATA[<h1>1.数据大屏展示——飞机工业集团/旅游局</h1><h2 id="1-1-echarts">1.1 echarts</h2><h3 id="文档">文档</h3><h3 id="数据对接">数据对接</h3><h1>2.客户的“需求”——环卫后台管理系统</h1><h2 id="2-1审批">2.1审批</h2><h2 id="2-2车辆维修同比环比展示">2.2车辆维修同比环比展示</h2><h1>3.从零开始的vue项目——酒店后台管理系统</h1><h2 id="3-1-element-UI使用">3.1 element UI使用</h2><pre><code class="hljs javascript"><span class="hljs-comment">//安装 element-ui</span>npm install element-ui</code></pre><pre><code class="hljs vue">&#x2F;&#x2F;在main.js里面如下配置import Vue from &#39;vue&#39;;import ElementUI from &#39;element-ui&#39;;import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;import locale from &#39;element-ui&#x2F;lib&#x2F;locale&#x2F;lang&#x2F;zh-CN&#39;import App from &#39;.&#x2F;App.vue&#39;;Vue.use(ElementUI, &#123;  locale,  size: &quot;medium&quot;&#125;);new Vue(&#123;  el: &#39;#app&#39;,  render: h &#x3D;&gt; h(App)&#125;);</code></pre><p>其余element-ui组件的用法参考它们各自的文档，比较常用的有导航栏、表单、表格、分页、标签页、对话框、卡片等</p><h2 id="3-2-v-router-结合element-ui-导航栏组件">3.2 v-router 结合element-ui 导航栏组件</h2><!-- ![image-20200820115113835](/Users/shell0108/Library/Application Support/typora-user-images/image-20200820115113835.png) --><pre><code class="hljs javascript">Vue.use(VueRouter)  <span class="hljs-keyword">const</span> routes = [  &#123;    <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span>,    <span class="hljs-attr">component</span>: Home,    <span class="hljs-attr">name</span>:<span class="hljs-string">'Home'</span>,    <span class="hljs-attr">redirect</span>:<span class="hljs-string">"zhsj"</span>,    <span class="hljs-attr">children</span>:[      &#123;        <span class="hljs-attr">path</span>:<span class="hljs-string">"zhsj"</span>,        <span class="hljs-attr">component</span>:ComprehensiveData,        <span class="hljs-attr">meta</span>: &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">'综合数据'</span>, <span class="hljs-attr">icon</span>: zhsj, <span class="hljs-attr">iconActive</span>:zhsj&#125;,      &#125;,      &#123;    .........            &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/login'</span>, <span class="hljs-attr">component</span>: Login, <span class="hljs-attr">name</span>: <span class="hljs-string">'Login'</span> &#125;,  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/404'</span>, <span class="hljs-attr">component</span>: NotFound, <span class="hljs-attr">name</span>: <span class="hljs-string">'NotFound'</span> &#125;,  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'*'</span>, <span class="hljs-attr">redirect</span>: &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/404'</span> &#125; &#125;  ]<span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;  <span class="hljs-attr">mode</span>: <span class="hljs-string">'history'</span>,  <span class="hljs-attr">base</span>: process.env.BASE_URL,  routes&#125;)</code></pre><p>上图引入组件的写法采用的是路由懒加载，当路由被访问的时候才访问相应的组件，提高页面的性能</p><pre><code class="hljs vue">&lt;el-menu :default-active&#x3D;&quot;$route.path&quot; router unique-opened active-text-color&#x3D;&quot;#fff&quot; @open&#x3D;&quot;setActiveIndex&quot; @select&#x3D;&quot;setActiveIndex&quot;&gt;&lt;template v-for&#x3D;&quot;(item,index) in $router.options.routes[0].children&quot;&gt;  &lt;el-submenu :index&#x3D;&quot;&#39;&#x2F;&#39; + item.path&quot; :key&#x3D;&quot;&#39;menu-&#39; + index&quot; v-if&#x3D;&quot;item.children&quot;&gt;    &lt;template slot&#x3D;&quot;title&quot; &gt;    &lt;img :src&#x3D;&quot;activeIndex &#x3D;&#x3D;&#x3D; &#39;&#x2F;&#39; + item.path ? item.meta.iconActive : item.meta.icon&quot; style&#x3D;&quot;height:22px;width:22px;margin-right:10px&quot;&gt;      &lt;span slot&#x3D;&quot;title&quot; style&#x3D;&quot;font-size: 16px;color: #fff;&quot; :style&#x3D;&quot;activeIndex &#x3D;&#x3D;&#x3D; &#39;&#x2F;&#39; + item.path ?&#39;color:#fff;font-weight:900;&#39;:&#39;&#39;&quot;&gt;&#123;&#123;item.meta.title&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;template&gt;      &lt;template v-for&#x3D;&quot;(childItem, childIndex) in item.children&quot;&gt;    &lt;el-menu-item :index&#x3D;&quot;&#39;&#x2F;&#39; + item.path + &#39;&#x2F;&#39; + childItem.path&quot;                    :key&#x3D;&quot;&#39;menu-&#39; + index + &#39;-&#39; + childIndex&quot;                    v-if&#x3D;&quot;!childItem.meta.isNoNav&quot;                    &gt;                  &lt;i :class&#x3D;&quot;childItem.meta.icon&quot;&gt;&lt;&#x2F;i&gt;      &lt;span slot&#x3D;&quot;title&quot; style&#x3D;&quot;font-size: 16px;color: #fff;&quot; :style&#x3D;&quot;subActiveIndex &#x3D;&#x3D;&#x3D; childItem.path ?&#39;font-weight:900;&#39;:&#39;&#39;&quot; &gt;&#123;&#123;childItem.meta.title&#125;&#125;&lt;&#x2F;span&gt;      &lt;&#x2F;el-menu-item&gt;  &lt;&#x2F;template&gt;  &lt;&#x2F;el-submenu&gt;    &lt;el-menu-item :index&#x3D;&quot;&#39;&#x2F;&#39; + item.path&quot; :key&#x3D;&quot;&#39;menu-&#39; + index&quot; v-else-if&#x3D;&quot;!item.meta.isNoNav&quot;&gt;                               &lt;img :src&#x3D;&quot;activeIndex &#x3D;&#x3D;&#x3D; &#39;&#x2F;&#39; + item.path ? item.meta.iconActive : item.meta.icon&quot; style&#x3D;&quot;height:22px;width:22px;margin-right:10px&quot;&gt;                            &lt;span slot&#x3D;&quot;title&quot; style&#x3D;&quot;font-size: 16px;color: #fff;&quot; :style&#x3D;&quot;activeIndex &#x3D;&#x3D;&#x3D; &#39;&#x2F;&#39; + item.path ?&#39;font-weight:900;&#39;:&#39;&#39;&quot;&gt;&#123;&#123;item.meta.title&#125;&#125;&lt;&#x2F;span&gt;                        &lt;&#x2F;el-menu-item&gt;                    &lt;&#x2F;template&gt;                &lt;&#x2F;el-menu&gt;</code></pre><h2 id="3-3-组件复用">3.3 组件复用</h2><h3 id="3-3-1-订单详情页">3.3.1 订单详情页</h3><p>​这里的订单有很多种状态</p><pre><code class="hljs javascript">orderStatusIndex: [        <span class="hljs-string">"待支付"</span>,        <span class="hljs-string">"未确认"</span>,        <span class="hljs-string">"已确认"</span>,****        <span class="hljs-string">"进行中"</span>,        <span class="hljs-string">"已完成"</span>,        <span class="hljs-string">"异常订单-未处理"</span>,        <span class="hljs-string">"已取消"</span>,        <span class="hljs-string">"异常订单-已处理"</span>      ]</code></pre><!-- ![截屏2020-08-20上午11.21.42](/Users/shell0108/Desktop/截屏2020-08-20上午11.21.42.png) --><p>经过沟通后的页面逻辑是，很多地方可以点进去查看订单详情，根据订单状态的不同，显示的详情信息会有一些差别。其中如果订单状态是“异常订单—未处理”，还要展示处理异常订单的按钮，点击后再展示具体的处理页面逻辑，如下：</p><!-- ![截屏2020-08-20上午11.28.12](/Users/shell0108/Desktop/截屏2020-08-20上午11.28.12.png) --><p>如果订单状态是“异常订单—已处理”，则显示查看处理记录按钮，点击按钮后展示处理记录，与上面页面有所不同的是，没有了进行异常处理的那些按钮，只是一个纯展示的页面。</p><p>与此同时，这个订单详情页是在对话框里面调用的，需要传入订单的id，根据这个id来向后端查询这个订单的详情。</p><pre><code class="hljs vue">&lt;el-dialog title&#x3D;&quot;订单详情&quot; :visible.sync&#x3D;&quot;orderDetailDlg&quot; width&#x3D;&quot;70%&quot; top&#x3D;&quot;100vh&quot; center&gt;      &lt;orderDetail :orderId &#x3D; &quot;currentOrderId&quot;&gt;&lt;&#x2F;orderDetail&gt;&lt;&#x2F;el-dialog&gt;......import orderDetail from &quot;@&#x2F;views&#x2F;common&#x2F;orderDetail.vue&quot;;...components: &#123; orderDetail &#125;</code></pre><p>其中currentOrderId定义在data里面，在点击查看订单详情的时候，从当前订单获取再进行赋值。</p><h2 id="3-4-ES6">3.4 ES6</h2><p>参考 <a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ES6入门教程——阮一峰</a> 进行学习，并在实际项目中应用</p><p>常用的有箭头函数、解构赋值、async函数等</p><h2 id="3-5-vuex">3.5 vuex</h2><h2 id="3-6-axiox封装API">3.6 axiox封装API</h2><h2 id="3-7-css相关">3.7 css相关</h2><h3 id="3-7-1响应式布局">3.7.1响应式布局</h3><p>采用flex布局，外层div块全部作为flex容器，使得flex项目可以响应式布局。</p><p>比较常用的场景是横向布局，设置项目常用的属性是justify-content，其6个属性的效果如下</p><!-- ![image-20200820093123924](/Users/shell0108/Library/Application Support/typora-user-images/image-20200820093123924.png) --><h3 id="3-7-2-登录页-系统首页-还原设计稿">3.7.2 登录页/系统首页 还原设计稿</h3><!-- ![image-20200820093714366](/Users/shell0108/Library/Application Support/typora-user-images/image-20200820093714366.png) --><p>系统首页是展示页，内容会比较多，我分为了下面这几大块</p><!-- ![image-20200820094837465](/Users/shell0108/Library/Application Support/typora-user-images/image-20200820094837465.png) --><!-- ![截屏2020-08-20上午9.55.51](/Users/shell0108/Desktop/截屏2020-08-20上午9.55.51.png) --><p>给content-left一个最小宽度，当屏幕宽度缩小时候，content-right会挤下去</p><pre><code class="hljs css">@media only screen and (*max-width*: 1535px) &#123;  .content-left &#123;    ···  &#125;  .content-right &#123;    ···   &#125;&#125;</code></pre><p>具体到每个小卡片里面的布局，也都采用flex布局，即box-card样式</p><pre><code class="hljs scss"><span class="hljs-selector-class">.box-card</span> &#123;  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;  <span class="hljs-comment">//小竖条</span>  <span class="hljs-selector-class">.verticalBar</span> &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">3px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;    <span class="hljs-attribute">background</span>: rgba(<span class="hljs-number">42</span>, <span class="hljs-number">203</span>, <span class="hljs-number">181</span>, <span class="hljs-number">1</span>);    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">11px</span>;    <span class="hljs-attribute">float</span>: left;    <span class="hljs-attribute">position</span>: relative;    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">8px</span>;    <span class="hljs-attribute">top</span>: <span class="hljs-number">2px</span>;  &#125;  <span class="hljs-selector-class">.box-title</span> &#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;    <span class="hljs-attribute">font-weight</span>: bold;    <span class="hljs-attribute">color</span>: rgba(<span class="hljs-number">51</span>, <span class="hljs-number">51</span>, <span class="hljs-number">51</span>, <span class="hljs-number">1</span>);    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;  &#125;  <span class="hljs-selector-tag">p</span> &#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;  &#125;  <span class="hljs-selector-class">.spec-number</span> &#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36px</span>;    <span class="hljs-attribute">font-weight</span>: bold;  &#125;  <span class="hljs-selector-class">.number-desc</span> &#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;    <span class="hljs-attribute">font-weight</span>: bold;  &#125;  <span class="hljs-selector-class">.blue-number</span> &#123;    <span class="hljs-attribute">color</span>: rgba(<span class="hljs-number">42</span>, <span class="hljs-number">203</span>, <span class="hljs-number">181</span>, <span class="hljs-number">1</span>);  &#125;  <span class="hljs-selector-class">.red-number</span> &#123;    <span class="hljs-attribute">color</span>: rgba(<span class="hljs-number">255</span>, <span class="hljs-number">66</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>);  &#125;  <span class="hljs-selector-class">.grey-number</span> &#123;    <span class="hljs-attribute">color</span>: rgba(<span class="hljs-number">102</span>, <span class="hljs-number">102</span>, <span class="hljs-number">102</span>, <span class="hljs-number">1</span>);  &#125;&#125;</code></pre><p>对于content-left处的小圆点、已查看/未查看、查看详情按钮、背景颜色、滚动条都要单独设置样式</p><pre><code class="hljs scss"><span class="hljs-selector-class">.content-left</span> &#123;    <span class="hljs-attribute">background</span>: rgba(<span class="hljs-number">239</span>, <span class="hljs-number">239</span>, <span class="hljs-number">239</span>, <span class="hljs-number">1</span>);    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">6px</span> <span class="hljs-number">12px</span> rgba(<span class="hljs-number">47</span>, <span class="hljs-number">142</span>, <span class="hljs-number">129</span>, <span class="hljs-number">0.1</span>);    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">12px</span>;    <span class="hljs-selector-class">.tab-pane</span> &#123;      <span class="hljs-attribute">height</span>: <span class="hljs-number">830px</span>;      <span class="hljs-attribute">overflow-y</span>: scroll;      <span class="hljs-attribute">overflow-x</span>: hidden;      <span class="hljs-selector-class">.detailButton</span> &#123;        <span class="hljs-attribute">float</span>: right;        <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">0</span>;        <span class="hljs-attribute">position</span>: relative;        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#2ddbc3</span>;        <span class="hljs-attribute">border</span>: none;        <span class="hljs-attribute">width</span>: <span class="hljs-number">94px</span>;        <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;      &#125;    &#125;    <span class="hljs-selector-class">.tab-pane</span>::-webkit-scrollbar &#123;      width: <span class="hljs-number">10px</span>;    &#125;    <span class="hljs-selector-class">.tab-pane</span>::-webkit-scrollbar-track &#123;      /*滚动条里面轨道*/      background: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.05</span>);    &#125;    <span class="hljs-comment">/*滚动条里面小方块*/</span>    <span class="hljs-selector-class">.tab-pane</span>::-webkit-scrollbar-thumb &#123;      background: rgba(<span class="hljs-number">156</span>, <span class="hljs-number">213</span>, <span class="hljs-number">205</span>, <span class="hljs-number">1</span>);      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;    &#125;    <span class="hljs-keyword">@mixin</span> commonView&#123;      <span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span>;      <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;      <span class="hljs-attribute">float</span>: left;      <span class="hljs-attribute">top</span>: <span class="hljs-number">4px</span>;      <span class="hljs-attribute">position</span>: relative;    &#125;    <span class="hljs-selector-class">.viewd</span> &#123;      <span class="hljs-keyword">@include</span> commonView;      <span class="hljs-attribute">background</span>: rgba(<span class="hljs-number">42</span>, <span class="hljs-number">203</span>, <span class="hljs-number">181</span>, <span class="hljs-number">1</span>);      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid rgba(<span class="hljs-number">171</span>, <span class="hljs-number">239</span>, <span class="hljs-number">230</span>, <span class="hljs-number">1</span>);    &#125;    <span class="hljs-selector-class">.unView</span> &#123;      <span class="hljs-keyword">@include</span> commonView;      <span class="hljs-attribute">background</span>: rgba(<span class="hljs-number">255</span>, <span class="hljs-number">146</span>, <span class="hljs-number">62</span>, <span class="hljs-number">1</span>);      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid rgba(<span class="hljs-number">255</span>, <span class="hljs-number">207</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1</span>);    &#125;    <span class="hljs-selector-class">.viewdText</span> &#123;      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid rgba(<span class="hljs-number">171</span>, <span class="hljs-number">239</span>, <span class="hljs-number">230</span>, <span class="hljs-number">1</span>);      <span class="hljs-attribute">color</span>: rgba(<span class="hljs-number">171</span>, <span class="hljs-number">239</span>, <span class="hljs-number">230</span>, <span class="hljs-number">1</span>);      <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span>;      <span class="hljs-attribute">margin</span>:<span class="hljs-number">4px</span>;    &#125;    <span class="hljs-selector-class">.unViewText</span> &#123;      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid rgba(<span class="hljs-number">255</span>, <span class="hljs-number">207</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1</span>);      <span class="hljs-attribute">color</span>: rgba(<span class="hljs-number">255</span>, <span class="hljs-number">146</span>, <span class="hljs-number">62</span>, <span class="hljs-number">1</span>);      <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span>;      <span class="hljs-attribute">margin</span>:<span class="hljs-number">4px</span>    &#125;  .time&#123;      font-size:<span class="hljs-number">12px</span>;      <span class="hljs-attribute">color</span>:rgba(<span class="hljs-number">153</span>,<span class="hljs-number">153</span>,<span class="hljs-number">153</span>,<span class="hljs-number">1</span>);    &#125;  &#125;</code></pre><p>在vue 模板里面采用v-for循环生成假数据、已查看/ 未查看样式 使用vue的样式绑定</p><pre><code class="hljs vue">&lt;el-card class&#x3D;&quot;box-card&quot; v-for&#x3D;&quot; n in 20&quot; :key&#x3D;&quot;n&quot; style&#x3D;&quot;margin:10px&quot;&gt;&lt;div slot&#x3D;&quot;header&quot; class&#x3D;&quot;clearfix&quot;&gt;  &lt;div :class&#x3D;&quot;&#123; &#39;viewd&#39;: viewd, &#39;unView&#39;: !viewd &#125;&quot;&gt;&lt;&#x2F;div&gt;  &lt;span&gt;xxx大酒店 酒店信息变动&lt;&#x2F;span&gt;  &lt;span :class&#x3D;&quot;&#123; &#39;viewdText&#39;: viewd, &#39;unViewText&#39;: !viewd &#125;&quot;&gt;&#123;&#123;viewd ? &#39;已查看&#39; : &#39;未查看&#39; &#125;&#125;&lt;&#x2F;span&gt;  &lt;span class&#x3D;&quot;time&quot;&gt;2020.5.28&lt;&#x2F;span&gt;  &lt;el-button type&#x3D;&quot;primary&quot; class&#x3D;&quot;detailButton&quot;&gt;查看详情  &lt;&#x2F;el-button&gt;  &lt;&#x2F;div&gt;  &lt;div&gt;酒店新装修,房间种类有增加,请平台审核通过&lt;&#x2F;div&gt;&lt;&#x2F;el-card&gt;</code></pre><p>最终页面实现效果如下：</p><!-- ![截屏2020-08-20上午10.37.42](/Users/shell0108/Desktop/截屏2020-08-20上午10.37.42.png) --><h3 id="3-7-3-scss">3.7.3 scss</h3><p>可以进行选择器嵌套，与vue模板中的结构相对应，这样写出来就不会显得很乱</p><p>同时进行样式的复用也会方便很多</p><p>更多scss的教程参考  <a href="https://ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS用法指南-阮一峰</a></p><h2 id="3-8部署到阿里云服务器上">3.8部署到阿里云服务器上</h2><h3 id="3-8-1-nginx">3.8.1 nginx</h3><h1>4协作开发</h1><h3 id="4-1-gitee——与前端同事协作">4.1 gitee——与前端同事协作</h3><p>gitee是基于git的代码托管平台</p><h3 id="4-2-swagger-ui——与后端同事协作">4.2 swagger-ui——与后端同事协作</h3><p>后端写的接口会显示在swagger-ui上面，并且带有一些接口说明，类似于postman可以直接对接口进行测试，一般先在swagger上跑通接口，前端再来进行对接</p><h3 id="4-2-墨刀、蓝湖——与设计师同事协作">4.2 墨刀、蓝湖——与设计师同事协作</h3><p>墨刀是原型图制作工具、蓝湖是高保真设计稿制作工具</p><h3 id="4-3-禅道——与测试同事协作">4.3 禅道——与测试同事协作</h3><p>这是一个bug提交与管理平台，类似jira</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>重建本站</title>
    <link href="/2020/02/27/%E9%87%8D%E5%BB%BA%E6%9C%AC%E7%AB%99%EF%BC%88%E6%94%BE%E5%BC%83%E8%BF%98%E5%8E%9F%E4%BA%86%EF%BC%89/"/>
    <url>/2020/02/27/%E9%87%8D%E5%BB%BA%E6%9C%AC%E7%AB%99%EF%BC%88%E6%94%BE%E5%BC%83%E8%BF%98%E5%8E%9F%E4%BA%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1>1.复杂的备份还原,已经放弃 逃:）</h1><p><strong>备份</strong>真的是很重要的一件事情，当初搭建博客的时候没有想到换电脑这茬，结果还原windows把本地的hexo环境全清空了，虽然在github上还有deploy生成的网站文件，但也懒得去恢复了。</p><a id="more"></a><p>既然我们已经用了GitHub来托管我们生成出来的静态网站，那么为什么不也把Hexo博客的源文件也host在GitHub上呢。那么问题来了，如果我们把Hexo博客的源文件托管在GitHub上，我们的发布流程就会变为：</p><p><strong>1</strong>:执行git push把更新的源文件push到托管源文件的GitHub Repo<br><strong>2</strong>:执行hexo deploy来更新托管静态网站的GitHub Pages</p><p>略显麻烦的操作，为此应该有更优雅的版本控制与持续集成方法，于是以后不要轻易换电脑了啊喂</p><hr><h1>2.本站历史</h1><p>在知乎<a href="https://github.com/MisterBooo/LeetCodeAnimation" target="_blank" rel="noopener">有哪些好看的 Hexo 主题？</a> 问题下 看到高中生做得二次猿博客，细节拉满，老学长自愧不如啊（我好菜，哭）</p><p>我第一次搭建博客可以追溯到<strong>2017.6</strong>（大二），看了hexo入门搭了几天还心血来潮地注册了阿里云的域名（一年后过期了），然后再没有管过它，我错了对不起qaq<br>回忆起大二到大三上的时间，大部分我都在寝室里打ps4（杀疯了已经，游戏好快乐）</p><!-- ![寝室ps4环境](https://pic.downk.cc/item/5f0570c614195aa594fc6817.jpg) --><p><img src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/10/1d92ddf86f2d454522224c04b9ca6a2d.png" srcset="/img/loading.gif" alt="寝室ps4环境"></p><p>时间来到了<strong>2018.11</strong>，开始找大三下的实习了，那段时间咸鱼突刺准备面试，有些学习经验还是重新把博客捡起来写进去，后来找到前端实习了又没再管过博客了qaq，再次对不起</p><p>之前用的yilla上次更新都是2017年（3 years ago）了，现在（<strong>2020.7</strong>）重新又换了个Fluid主题，打算好好维护自己的博客了，起码一个月写一篇技术学习总结这样</p><hr><h1>3.未来展望</h1><blockquote><p>慢慢丰富完善添加博客的一些内容趴</p></blockquote><ul><li><input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0">看板娘 使用live2d模型，加强互动</label></li><li><input type="checkbox" id="checkbox1" checked="true"><label for="checkbox1">使用vscode来进行markdown的写作</label></li><li><input type="checkbox" id="checkbox2"><label for="checkbox2">图床对比（好像onedrive可以生成外链），我主要不想弄付费图床。过去用微博图床，好像已经挂了，现在在用</label><a href="https://www.superbed.cn" target="_blank" rel="noopener">聚合图床</a>和<a href="https://img.plushine.cn" target="_blank" rel="noopener">github图床</a></li><li><input type="checkbox" id="checkbox3"><label for="checkbox3">markdown转pdf、html、doc，超级方便</label></li><li><input type="checkbox" id="checkbox4" checked="true"><label for="checkbox4">网站图标，离开网站标签页“崩溃”，回来又变好 </label>😆</li><li><input type="checkbox" id="checkbox5" checked="true"><label for="checkbox5">博客支持显示emoji和checkbox，配置hexo 的markdown渲染器</label></li><li><input type="checkbox" id="checkbox6" checked="true"><label for="checkbox6">鼠标样式与滚动条样式美化</label></li><li><input type="checkbox" id="checkbox7"><label for="checkbox7">移动端适配优化</label></li><li><input type="checkbox" id="checkbox8"><label for="checkbox8">性能优化,了解学习cdn</label></li></ul><h1>4.参考 <s>抄袭</s> 来源</h1><ul><li><a href="https://formulahendry.github.io/2016/12/04/hexo-ci/" target="_blank" rel="noopener">Hexo的版本控制与持续集成</a></li><li><a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform</a></li><li><a href="https://flymc.cc/2020/03/28/Sakura/" target="_blank" rel="noopener">Hexo部署|Sakura主题调教</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85420403" target="_blank" rel="noopener">Hexo 博客优化之博客美化系列（持续更新）</a></li><li><a href="https://hexo.fluid-dev.com/docs/guide/" target="_blank" rel="noopener">Fluid配置指南</a></li><li><a href="https://wugenqiang.github.io/articles/hexo-do-optimization-markdown.html" target="_blank" rel="noopener">Hexo中Markdown语法(GFM)使用</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
